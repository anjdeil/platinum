import { NextApiRequest, NextApiResponse } from 'next';
import {
  fetchSitemap, modifySitemapUrls,
  rewriteDomainSitemap,
  SITEMAP_CACHE_HEADERS,
} from '@/utils/sitemap';
import getDomainFromUrl from '@/utils/getDomainFromUrl';

const WP_ADMIN_DOMAIN = getDomainFromUrl(
  process.env.NEXT_PUBLIC_WP_URL || 'admin.example.com'
);

/**
 *
 * this handler transforms and proxies an autogenerated WordPress child sitemaps
 */
export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { slug } = req.query;

  if (!slug || Array.isArray(slug)) {
    return res.status(400).send('Invalid sitemap slug');
  }

  try {
    // Fetch the child sitemap from WordPress
    const wpSitemapUrl = `https://${WP_ADMIN_DOMAIN}/${slug}`;
    const xmlContent = await fetchSitemap(wpSitemapUrl);

    // Set cache headers
    res.setHeader('Content-Type', 'application/xml');
    Object.entries(SITEMAP_CACHE_HEADERS).forEach(([key, value]) => {
      res.setHeader(key, value);
    });

    // rewrite site domain in the sitemap URLs
    // incorrect URLs are generated by WPML
      const transformedXml = await rewriteDomainSitemap(xmlContent);
      const modifiedXml = await modifySitemapUrls(transformedXml);
      return res.status(200).send(modifiedXml);
  } catch (error: any) {
    console.error(`Error processing sitemap ${slug}:`, error);
    if (error.message?.includes('not found')) {
      return res.status(404).send('Requested sitemap not found');
    } else {
      return res.status(500).send('Error generating sitemap');
    }
  }
}

export const config = {
  api: {
    responseLimit: false,
  },
};
